/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/search': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search projects */
    get: operations['searchProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** Get a project */
    get: operations['getProject'];
    put?: never;
    post?: never;
    /** Delete a project */
    delete: operations['deleteProject'];
    options?: never;
    head?: never;
    /** Modify a project */
    patch: operations['modifyProject'];
    trace?: never;
  };
  '/projects': {
    parameters: {
      query: {
        /** @description The IDs and/or slugs of the projects */
        ids: components['parameters']['MultipleProjectIdentifier'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple projects */
    get: operations['getProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Bulk-edit multiple projects */
    patch: operations['patchProjects'];
    trace?: never;
  };
  '/projects_random': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of random projects */
    get: operations['randomProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a project */
    post: operations['createProject'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/icon': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete project's icon */
    delete: operations['deleteProjectIcon'];
    options?: never;
    head?: never;
    /**
     * Change project's icon
     * @description The new icon may be up to 256KiB in size.
     */
    patch: operations['changeProjectIcon'];
    trace?: never;
  };
  '/project/{id|slug}/check': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** Check project slug/ID validity */
    get: operations['checkProjectValidity'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/gallery': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add a gallery image
     * @description Modrinth allows you to upload files of up to 5MiB to a project's gallery.
     */
    post: operations['addGalleryImage'];
    /** Delete a gallery image */
    delete: operations['deleteGalleryImage'];
    options?: never;
    head?: never;
    /** Modify a gallery image */
    patch: operations['modifyGalleryImage'];
    trace?: never;
  };
  '/project/{id|slug}/dependencies': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** Get all of a project's dependencies */
    get: operations['getDependencies'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/follow': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Follow a project */
    post: operations['followProject'];
    /** Unfollow a project */
    delete: operations['unfollowProject'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/schedule': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Schedule a project */
    post: operations['scheduleProject'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/version': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** List project's versions */
    get: operations['getProjectVersions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    /** Get a version */
    get: operations['getVersion'];
    put?: never;
    post?: never;
    /** Delete a version */
    delete: operations['deleteVersion'];
    options?: never;
    head?: never;
    /** Modify a version */
    patch: operations['modifyVersion'];
    trace?: never;
  };
  '/project/{id|slug}/version/{id|number}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
        /** @description The version ID or version number */
        'id|number': string;
      };
      cookie?: never;
    };
    /**
     * Get a version given a version number or ID
     * @description Please note that, if the version number provided matches multiple versions, only the **oldest matching version** will be returned.
     */
    get: operations['getVersionFromIdOrNumber'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a version
     * @description This route creates a version on an existing project. There must be at least one file attached to each new version, unless the new version's status is `draft`. `.mrpack`, `.jar`, `.zip`, and `.litemod` files are accepted.
     *
     *     The request is a [multipart request](https://www.ietf.org/rfc/rfc2388.txt) with at least two form fields: one is `data`, which includes a JSON body with the version metadata as shown below, and at least one field containing an upload file.
     *
     *     You can name the file parts anything you would like, but you must list each of the parts' names in `file_parts`, and optionally, provide one to use as the primary file in `primary_file`.
     *
     */
    post: operations['createVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version/{id}/schedule': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Schedule a version */
    post: operations['scheduleVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/versions': {
    parameters: {
      query: {
        /** @description The IDs of the versions */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple versions */
    get: operations['getVersions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version/{id}/file': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add files to version
     * @description Project files are attached. `.mrpack` and `.jar` files are accepted.
     */
    post: operations['addFilesToVersion'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version_file/{hash}': {
    parameters: {
      query: {
        /** @description The algorithm of the hash */
        algorithm: components['parameters']['AlgorithmIdentifier'];
      };
      header?: never;
      path: {
        /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
        hash: components['parameters']['FileHashIdentifier'];
      };
      cookie?: never;
    };
    /** Get version from hash */
    get: operations['versionFromHash'];
    put?: never;
    post?: never;
    /** Delete a file from its hash */
    delete: operations['deleteFileFromHash'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version_file/{hash}/update': {
    parameters: {
      query: {
        /** @description The algorithm of the hash */
        algorithm: components['parameters']['AlgorithmIdentifier'];
      };
      header?: never;
      path: {
        /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
        hash: components['parameters']['FileHashIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Latest version of a project from a hash, loader(s), and game version(s) */
    post: operations['getLatestVersionFromHash'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version_files': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get versions from hashes
     * @description This is the same as [`/version_file/{hash}`](#operation/versionFromHash) except it accepts multiple hashes.
     */
    post: operations['versionsFromHashes'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/version_files/update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Latest versions of multiple project from hashes, loader(s), and game version(s)
     * @description This is the same as [`/version_file/{hash}/update`](#operation/getLatestVersionFromHash) except it accepts multiple hashes.
     */
    post: operations['getLatestVersionsFromHashes'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{id|username}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** Get a user */
    get: operations['getUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Modify a user */
    patch: operations['modifyUser'];
    trace?: never;
  };
  '/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user from authorization header */
    get: operations['getUserFromAuth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users': {
    parameters: {
      query: {
        /** @description The IDs of the users */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple users */
    get: operations['getUsers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{id|username}/icon': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove user's avatar */
    delete: operations['deleteUserIcon'];
    options?: never;
    head?: never;
    /**
     * Change user's avatar
     * @description The new avatar may be up to 2MiB in size.
     */
    patch: operations['changeUserIcon'];
    trace?: never;
  };
  '/user/{id|username}/projects': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** Get user's projects */
    get: operations['getUserProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{id|username}/follows': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** Get user's followed projects */
    get: operations['getFollowedProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{id|username}/payouts': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** Get user's payout history */
    get: operations['getPayoutHistory'];
    put?: never;
    /**
     * Withdraw payout balance to PayPal or Venmo
     * @description Warning: certain amounts get withheld for fees. Please do not call this API endpoint without first acknowledging the warnings on the corresponding frontend page.
     */
    post: operations['withdrawPayout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user/{id|username}/notifications': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** Get user's notifications */
    get: operations['getUserNotifications'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/notification/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the notification */
        id: components['parameters']['NotificationIdentifier'];
      };
      cookie?: never;
    };
    /** Get notification from ID */
    get: operations['getNotification'];
    put?: never;
    post?: never;
    /** Delete notification */
    delete: operations['deleteNotification'];
    options?: never;
    head?: never;
    /** Mark notification as read */
    patch: operations['readNotification'];
    trace?: never;
  };
  '/notifications': {
    parameters: {
      query: {
        /** @description The IDs of the notifications */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple notifications */
    get: operations['getNotifications'];
    put?: never;
    post?: never;
    /** Delete multiple notifications */
    delete: operations['deleteNotifications'];
    options?: never;
    head?: never;
    /** Mark multiple notifications as read */
    patch: operations['readNotifications'];
    trace?: never;
  };
  '/report': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get your open reports */
    get: operations['getOpenReports'];
    put?: never;
    /**
     * Report a project, user, or version
     * @description Bring a project, user, or version to the attention of the moderators by reporting it.
     */
    post: operations['submitReport'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/report/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the report */
        id: components['parameters']['ReportIdentifier'];
      };
      cookie?: never;
    };
    /** Get report from ID */
    get: operations['getReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Modify a report */
    patch: operations['modifyReport'];
    trace?: never;
  };
  '/reports': {
    parameters: {
      query: {
        /** @description The IDs of the reports */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple reports */
    get: operations['getReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/thread/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the thread */
        id: components['parameters']['ThreadIdentifier'];
      };
      cookie?: never;
    };
    /** Get a thread */
    get: operations['getThread'];
    put?: never;
    /** Send a text message to a thread */
    post: operations['sendThreadMessage'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/threads': {
    parameters: {
      query: {
        /** @description The IDs of the threads */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get multiple threads */
    get: operations['getThreads'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/message/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the message */
        id: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a thread message */
    delete: operations['deleteThreadMessage'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/project/{id|slug}/members': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** Get a project's team members */
    get: operations['getProjectTeamMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/team/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    /** Get a team's members */
    get: operations['getTeamMembers'];
    put?: never;
    /** Add a user to a team */
    post: operations['addTeamMember'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/teams': {
    parameters: {
      query: {
        /** @description The IDs of the teams */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the members of multiple teams */
    get: operations['getTeams'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/team/{id}/join': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Join a team */
    post: operations['joinTeam'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/team/{id}/members/{id|username}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Remove a member from a team */
    delete: operations['deleteTeamMember'];
    options?: never;
    head?: never;
    /** Modify a team member's information */
    patch: operations['modifyTeamMember'];
    trace?: never;
  };
  '/team/{id}/owner': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Transfer team's ownership to another user */
    patch: operations['transferTeamOwnership'];
    trace?: never;
  };
  '/tag/category': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of categories
     * @description Gets an array of categories, their icons, and applicable project types
     */
    get: operations['categoryList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/loader': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of loaders
     * @description Gets an array of loaders, their icons, and supported project types
     */
    get: operations['loaderList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/game_version': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of game versions
     * @description Gets an array of game versions and information about them
     */
    get: operations['versionList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/license': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of licenses
     * @deprecated
     * @description Deprecated - simply use SPDX IDs.
     */
    get: operations['licenseList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/license/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The license ID to get the text of */
        id: string;
      };
      cookie?: never;
    };
    /** Get the text and title of a license */
    get: operations['licenseText'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/donation_platform': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of donation platforms
     * @description Gets an array of donation platforms and information about them
     */
    get: operations['donationPlatformList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/report_type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of report types
     * @description Gets an array of valid report types
     */
    get: operations['reportTypeList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/project_type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of project types
     * @description Gets an array of valid project types
     */
    get: operations['projectTypeList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tag/side_type': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of side types
     * @description Gets an array of valid side types
     */
    get: operations['sideTypeList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/updates/{id|slug}/forge_updates.json': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /**
     * Forge Updates JSON file
     * @description If you're a Forge mod developer, your Modrinth mods have an automatically generated `updates.json` using the
     *     [Forge Update Checker](https://docs.minecraftforge.net/en/latest/misc/updatechecker/).
     *
     *     The only setup is to insert the URL into the `[[mods]]` section of your `mods.toml` file as such:
     *
     *     ```toml
     *     [[mods]]
     *     # the other stuff here - ID, version, display name, etc.
     *     updateJSONURL = "https://api.modrinth.com/updates/{slug|ID}/forge_updates.json"
     *     ```
     *
     *     Replace `{slug|id}` with the slug or ID of your project.
     *
     *     Modrinth will handle the rest! When you update your mod, Forge will notify your users that their copy of your mod is out of date.
     *
     *     Make sure that the version format you use for your Modrinth releases is the same as the version format you use in your `mods.toml`.
     *     If you use a format such as `1.2.3-forge` or `1.2.3+1.19` with your Modrinth releases but your `mods.toml` only has `1.2.3`,
     *     the update checker may not function properly.
     *
     */
    get: operations['forgeUpdates'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/statistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Various statistics about this Modrinth instance */
    get: operations['statistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    BaseVersion: {
      /**
       * @description The name of this version
       * @example Version 1.0.0
       */
      name?: string;
      /**
       * @description The version number. Ideally will follow semantic versioning
       * @example 1.0.0
       */
      version_number?: string;
      /**
       * @description The changelog for this version
       * @example List of changes in this version: ...
       */
      changelog?: string | null;
      /** @description A list of specific versions of projects that this version depends on */
      dependencies?: components['schemas']['VersionDependency'][];
      /**
       * @description A list of versions of Minecraft that this version supports
       * @example [
       *       "1.16.5",
       *       "1.17.1"
       *     ]
       */
      game_versions?: string[];
      /**
       * @description The release channel for this version
       * @example release
       * @enum {string}
       */
      version_type?: 'release' | 'beta' | 'alpha';
      /**
       * @description The mod loaders that this version supports. In case of resource packs, use "minecraft"
       * @example [
       *       "fabric",
       *       "forge",
       *       "minecraft"
       *     ]
       */
      loaders?: string[];
      /**
       * @description Whether the version is featured or not
       * @example true
       */
      featured?: boolean;
      /**
       * @example listed
       * @enum {string}
       */
      status?: 'listed' | 'archived' | 'draft' | 'unlisted' | 'scheduled' | 'unknown';
      /** @enum {string|null} */
      requested_status?: 'listed' | 'archived' | 'draft' | 'unlisted' | null;
    };
    VersionDependency: {
      /**
       * @description The ID of the version that this version depends on
       * @example IIJJKKLL
       */
      version_id?: string | null;
      /**
       * @description The ID of the project that this version depends on
       * @example QQRRSSTT
       */
      project_id?: string | null;
      /**
       * @description The file name of the dependency, mostly used for showing external dependencies on modpacks
       * @example sodium-fabric-mc1.19-0.4.2+build.16.jar
       */
      file_name?: string | null;
      /**
       * @description The type of dependency that this version has
       * @example required
       * @enum {string}
       */
      dependency_type: 'required' | 'optional' | 'incompatible' | 'embedded';
    };
    EditableVersion: components['schemas']['BaseVersion'] & {
      /**
       * @description The hash format and the hash of the new primary file
       * @example [
       *       "sha1",
       *       "aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj"
       *     ]
       */
      primary_file?: string[];
      /** @description A list of file_types to edit */
      file_types?: components['schemas']['EditableFileType'][];
    };
    EditableFileType: {
      /**
       * @description The hash algorithm of the hash specified in the hash field
       * @example sha1
       */
      algorithm: string;
      /**
       * @description The hash of the file you're editing
       * @example aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj
       */
      hash: string;
      /**
       * @description The hash algorithm of the file you're editing
       * @example required-resource-pack
       * @enum {string|null}
       */
      file_type: 'required-resource-pack' | 'optional-resource-pack' | null;
    };
    CreatableVersion: components['schemas']['BaseVersion'] & {
      /**
       * @description The ID of the project this version is for
       * @example AABBCCDD
       */
      project_id: string;
      /** @description An array of the multipart field names of each file that goes with this version */
      file_parts: string[];
      /** @description The multipart field name of the primary file */
      primary_file?: string;
    };
    CreateVersionBody: {
      data: components['schemas']['CreatableVersion'];
    };
    Version: components['schemas']['BaseVersion'] & {
      /**
       * @description The ID of the version, encoded as a base62 string
       * @example IIJJKKLL
       */
      id: string;
      /**
       * @description The ID of the project this version is for
       * @example AABBCCDD
       */
      project_id: string;
      /**
       * @description The ID of the author who published this version
       * @example EEFFGGHH
       */
      author_id: string;
      /** Format: ISO-8601 */
      date_published: string;
      /** @description The number of times this version has been downloaded */
      downloads: number;
      /**
       * @deprecated
       * @description A link to the changelog for this version. Always null, only kept for legacy compatibility.
       * @example null
       */
      changelog_url?: string | null;
      /** @description A list of files available for download for this version */
      files: components['schemas']['VersionFile'][];
    };
    VersionFile: {
      hashes: components['schemas']['VersionFileHashes'];
      /**
       * @description A direct link to the file
       * @example https://cdn.modrinth.com/data/AABBCCDD/versions/1.0.0/my_file.jar
       */
      url: string;
      /**
       * @description The name of the file
       * @example my_file.jar
       */
      filename: string;
      /**
       * @description Whether this file is the primary one for its version. Only a maximum of one file per version will have this set to true. If there are not any primary files, it can be inferred that the first file is the primary one.
       * @example false
       */
      primary: boolean;
      /**
       * @description The size of the file in bytes
       * @example 1097270
       */
      size: number;
      /**
       * @description The type of the additional file, used mainly for adding resource packs to datapacks
       * @example required-resource-pack
       * @enum {string|null}
       */
      file_type?: 'required-resource-pack' | 'optional-resource-pack' | null;
    };
    /** @description A map of hashes of the file. The key is the hashing algorithm and the value is the string version of the hash. */
    VersionFileHashes: {
      /** @example 93ecf5fe02914fb53d94aa3d28c1fb562e23985f8e4d48b9038422798618761fe208a31ca9b723667a4e05de0d91a3f86bcd8d018f6a686c39550e21b198d96f */
      sha512?: string;
      /** @example c84dd4b3580c02b79958a0590afd5783d80ef504 */
      sha1?: string;
    };
    GetLatestVersionFromHashBody: {
      loaders: string[];
      /** @example [
       *       "1.18",
       *       "1.18.1"
       *     ] */
      game_versions: string[];
    };
    /** @description A map from hashes to versions */
    HashVersionMap: {
      [key: string]: components['schemas']['Version'];
    };
    /** @description A list of hashes and the algorithm used to create them */
    HashList: {
      /** @example [
       *       "ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4",
       *       "925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960"
       *     ] */
      hashes: string[];
      /**
       * @example sha512
       * @enum {string}
       */
      algorithm: 'sha1' | 'sha512';
    };
    GetLatestVersionsFromHashesBody: components['schemas']['HashList'] & {
      /** @example [
       *       "fabric"
       *     ] */
      loaders: string[];
      /** @example [
       *       "1.18",
       *       "1.18.1"
       *     ] */
      game_versions: string[];
    };
    BaseProject: {
      /**
       * @description The slug of a project, used for vanity URLs. Regex: ```^[\w!@$()`.+,"\-']{3,64}$```
       * @example my_project
       */
      slug?: string;
      /**
       * @description The title or name of the project
       * @example My Project
       */
      title?: string;
      /**
       * @description A short description of the project
       * @example A short description
       */
      description?: string;
      /**
       * @description A list of the categories that the project has
       * @example [
       *       "technology",
       *       "adventure",
       *       "fabric"
       *     ]
       */
      categories?: string[];
      /**
       * @description The client side support of the project
       * @example required
       * @enum {string}
       */
      client_side?: 'required' | 'optional' | 'unsupported' | 'unknown';
      /**
       * @description The server side support of the project
       * @example optional
       * @enum {string}
       */
      server_side?: 'required' | 'optional' | 'unsupported' | 'unknown';
    };
    ServerRenderedProject: components['schemas']['BaseProject'] & {
      /**
       * @description The project type of the project
       * @example mod
       * @enum {string}
       */
      project_type: 'mod' | 'modpack' | 'resourcepack' | 'shader';
      /** @description The total number of downloads of the project */
      downloads: number;
      /**
       * @description The URL of the project's icon
       * @example https://cdn.modrinth.com/data/AABBCCDD/b46513nd83hb4792a9a0e1fn28fgi6090c1842639.png
       */
      icon_url?: string | null;
      /**
       * @description The RGB color of the project, automatically generated from the project icon
       * @example 8703084
       */
      color?: number | null;
      /**
       * @description The ID of the moderation thread associated with this project
       * @example TTUUVVWW
       */
      thread_id?: string;
      /** @enum {string} */
      monetization_status?: 'monetized' | 'demonetized' | 'force-demonetized';
    };
    ProjectResult: components['schemas']['ServerRenderedProject'] & {
      /**
       * @description The ID of the project
       * @example AABBCCDD
       */
      project_id: string;
      /**
       * @description The username of the project's author
       * @example my_user
       */
      author: string;
      /**
       * @description A list of the categories that the project has which are not secondary
       * @example [
       *       "technology",
       *       "fabric"
       *     ]
       */
      display_categories?: string[];
      /**
       * @description A list of the minecraft versions supported by the project
       * @example [
       *       "1.8",
       *       "1.8.9"
       *     ]
       */
      versions: string[];
      /** @description The total number of users following the project */
      follows: number;
      /**
       * Format: ISO-8601
       * @description The date the project was added to search
       */
      date_created: string;
      /**
       * Format: ISO-8601
       * @description The date the project was last modified
       */
      date_modified: string;
      /**
       * @description The latest version of minecraft that this project supports
       * @example 1.8.9
       */
      latest_version?: string;
      /**
       * @description The SPDX license ID of a project
       * @example MIT
       */
      license: string;
      /**
       * @description All gallery images attached to the project
       * @example [
       *       "https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png",
       *       "https://cdn.modrinth.com/data/AABBCCDD/images/c21776867afb6046fdc3c21dbcf5cc50ae27a236.png"
       *     ]
       */
      gallery?: string[];
      /** @description The featured gallery image of the project */
      featured_gallery?: string | null;
    };
    NonSearchProject: components['schemas']['BaseProject'] & {
      /**
       * @description A long form description of the project
       * @example A long body describing my project in detail
       */
      body?: string;
      /**
       * @description The status of the project
       * @example approved
       * @enum {string}
       */
      status?:
        | 'approved'
        | 'archived'
        | 'rejected'
        | 'draft'
        | 'unlisted'
        | 'processing'
        | 'withheld'
        | 'scheduled'
        | 'private'
        | 'unknown';
      /**
       * @description The requested status when submitting for review or scheduling the project for release
       * @enum {string|null}
       */
      requested_status?: 'approved' | 'archived' | 'unlisted' | 'private' | 'draft' | null;
      /**
       * @description A list of categories which are searchable but non-primary
       * @example [
       *       "technology",
       *       "adventure",
       *       "fabric"
       *     ]
       */
      additional_categories?: string[];
      /**
       * @description An optional link to where to submit bugs or issues with the project
       * @example https://github.com/my_user/my_project/issues
       */
      issues_url?: string | null;
      /**
       * @description An optional link to the source code of the project
       * @example https://github.com/my_user/my_project
       */
      source_url?: string | null;
      /**
       * @description An optional link to the project's wiki page or other relevant information
       * @example https://github.com/my_user/my_project/wiki
       */
      wiki_url?: string | null;
      /**
       * @description An optional invite link to the project's discord
       * @example https://discord.gg/AaBbCcDd
       */
      discord_url?: string | null;
      /** @description A list of donation links for the project */
      donation_urls?: components['schemas']['ProjectDonationURL'][];
    };
    ProjectDonationURL: {
      /**
       * @description The ID of the donation platform
       * @example patreon
       */
      id?: string;
      /**
       * @description The donation platform this link is to
       * @example Patreon
       */
      platform?: string;
      /**
       * @description The URL of the donation platform and user
       * @example https://www.patreon.com/my_user
       */
      url?: string;
    };
    ModifiableProject: components['schemas']['NonSearchProject'] & {
      /**
       * @description The SPDX license ID of a project
       * @example LGPL-3.0-or-later
       */
      license_id?: string;
      /** @description The URL to this license */
      license_url?: string | null;
    };
    EditableProject: components['schemas']['ModifiableProject'] & {
      /** @description The title of the moderators' message for the project */
      moderation_message?: string | null;
      /** @description The body of the moderators' message for the project */
      moderation_message_body?: string | null;
    };
    CreatableProject: components['schemas']['ModifiableProject'] & {
      /**
       * @example modpack
       * @enum {string}
       */
      project_type: 'mod' | 'modpack';
      /**
       * @deprecated
       * @description A list of initial versions to upload with the created project. Deprecated - please upload version files after initial upload.
       */
      initial_versions?: components['schemas']['EditableVersion'][];
      /**
       * @deprecated
       * @description Whether the project should be saved as a draft instead of being sent to moderation for review. Deprecated - please always mark this as true.
       * @example true
       */
      is_draft?: boolean;
      /**
       * @deprecated
       * @description Gallery images to be uploaded with the created project. Deprecated - please upload gallery images after initial upload.
       */
      gallery_items?: components['schemas']['CreatableProjectGalleryItem'][];
    };
    CreatableProjectGalleryItem: {
      /** @description The name of the multipart item where the gallery media is located */
      item?: string;
      /**
       * @description Whether the image is featured in the gallery
       * @example true
       */
      featured?: boolean;
      /**
       * @description The title of the gallery image
       * @example My awesome screenshot!
       */
      title?: string | null;
      /**
       * @description The description of the gallery image
       * @example This awesome screenshot shows all of the blocks in my mod!
       */
      description?: string | null;
      /**
       * @description The order of the gallery image. Gallery images are sorted by this field and then alphabetically by title.
       * @example 0
       */
      ordering?: number;
    } | null;
    Project: components['schemas']['NonSearchProject'] &
      components['schemas']['ServerRenderedProject'] & {
        /**
         * @description The ID of the project, encoded as a base62 string
         * @example AABBCCDD
         */
        id: string;
        /**
         * @description The ID of the team that has ownership of this project
         * @example MMNNOOPP
         */
        team: string;
        /**
         * @deprecated
         * @description The link to the long description of the project. Always null, only kept for legacy compatibility.
         * @default null
         * @example null
         */
        body_url: string | null;
        moderator_message?: components['schemas']['ModeratorMessage'];
        /**
         * Format: ISO-8601
         * @description The date the project was published
         */
        published: string;
        /**
         * Format: ISO-8601
         * @description The date the project was last updated
         */
        updated: string;
        /**
         * Format: ISO-8601
         * @description The date the project's status was set to an approved status
         */
        approved?: string | null;
        /**
         * Format: ISO-8601
         * @description The date the project's status was submitted to moderators for review
         */
        queued?: string | null;
        /** @description The total number of users following the project */
        followers: number;
        license?: components['schemas']['ProjectLicense'];
        /**
         * @description A list of the version IDs of the project (will never be empty unless `draft` status)
         * @example [
         *       "IIJJKKLL",
         *       "QQRRSSTT"
         *     ]
         */
        versions?: string[];
        /**
         * @description A list of all of the game versions supported by the project
         * @example [
         *       "1.19",
         *       "1.19.1",
         *       "1.19.2",
         *       "1.19.3"
         *     ]
         */
        game_versions?: string[];
        /**
         * @description A list of all of the loaders supported by the project
         * @example [
         *       "forge",
         *       "fabric",
         *       "quilt"
         *     ]
         */
        loaders?: string[];
        /** @description A list of images that have been uploaded to the project's gallery */
        gallery?: components['schemas']['GalleryImage'][];
      };
    /**
     * @deprecated
     * @description A message that a moderator sent regarding the project
     * @example null
     */
    ModeratorMessage: {
      /** @description The message that a moderator has left for the project */
      message?: string;
      /** @description The longer body of the message that a moderator has left for the project */
      body?: string | null;
    } | null;
    /** @description The license of the project */
    ProjectLicense: {
      /**
       * @description The SPDX license ID of a project
       * @example LGPL-3.0-or-later
       */
      id?: string;
      /**
       * @description The long name of a license
       * @example GNU Lesser General Public License v3 or later
       */
      name?: string;
      /** @description The URL to this license */
      url?: string | null;
    };
    GalleryImage: {
      /**
       * @description The URL of the gallery image
       * @example https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png
       */
      url: string;
      /**
       * @description Whether the image is featured in the gallery
       * @example true
       */
      featured: boolean;
      /**
       * @description The title of the gallery image
       * @example My awesome screenshot!
       */
      title?: string | null;
      /**
       * @description The description of the gallery image
       * @example This awesome screenshot shows all of the blocks in my mod!
       */
      description?: string | null;
      /**
       * Format: ISO-8601
       * @description The date and time the gallery image was created
       */
      created: string;
      /**
       * @description The order of the gallery image. Gallery images are sorted by this field and then alphabetically by title.
       * @example 0
       */
      ordering?: number;
    } | null;
    ProjectDependencyList: {
      /** @description Projects that the project depends upon */
      projects?: components['schemas']['Project'][];
      /** @description Versions that the project depends upon */
      versions?: components['schemas']['Version'][];
    };
    PatchProjectsBody: {
      /** @description Set all of the categories to the categories specified here */
      categories?: string[];
      /** @description Add all of the categories specified here */
      add_categories?: string[];
      /** @description Remove all of the categories specified here */
      remove_categories?: string[];
      /** @description Set all of the additional categories to the categories specified here */
      additional_categories?: string[];
      /** @description Add all of the additional categories specified here */
      add_additional_categories?: string[];
      /** @description Remove all of the additional categories specified here */
      remove_additional_categories?: string[];
      /** @description Set all of the donation links to the donation links specified here */
      donation_urls?: components['schemas']['ProjectDonationURL'][];
      /** @description Add all of the donation links specified here */
      add_donation_urls?: components['schemas']['ProjectDonationURL'][];
      /** @description Remove all of the donation links specified here */
      remove_donation_urls?: components['schemas']['ProjectDonationURL'][];
      /**
       * @description An optional link to where to submit bugs or issues with the projects
       * @example https://github.com/my_user/my_project/issues
       */
      issues_url?: string | null;
      /**
       * @description An optional link to the source code of the projects
       * @example https://github.com/my_user/my_project
       */
      source_url?: string | null;
      /**
       * @description An optional link to the projects' wiki page or other relevant information
       * @example https://github.com/my_user/my_project/wiki
       */
      wiki_url?: string | null;
      /**
       * @description An optional invite link to the projects' discord
       * @example https://discord.gg/AaBbCcDd
       */
      discord_url?: string | null;
    };
    CreateProjectBody: {
      data: components['schemas']['CreatableProject'];
      /**
       * Format: binary
       * @description Project icon file
       * @enum {string}
       */
      icon?: '*.png' | '*.jpg' | '*.jpeg' | '*.bmp' | '*.gif' | '*.webp' | '*.svg' | '*.svgz' | '*.rgb';
    };
    ProjectIdentifier: {
      /** @example AABBCCDD */
      id?: string;
    };
    Schedule: {
      /**
       * Format: ISO-8601
       * @example 2023-02-05T19:39:55.551839Z
       */
      time: string;
      /**
       * @description The requested status when scheduling the project for release
       * @enum {string}
       */
      requested_status: 'approved' | 'archived' | 'unlisted' | 'private' | 'draft';
    };
    SearchResults: {
      /** @description The list of results */
      hits: components['schemas']['ProjectResult'][];
      /**
       * @description The number of results that were skipped by the query
       * @example 0
       */
      offset: number;
      /**
       * @description The number of results that were returned by the query
       * @example 10
       */
      limit: number;
      /**
       * @description The total number of results that match the query
       * @example 10
       */
      total_hits: number;
    };
    UserIdentifier: {
      /** @example EEFFGGHH */
      user_id: string;
    };
    EditableUser: {
      /**
       * @description The user's username
       * @example my_user
       */
      username: string;
      /**
       * @description The user's display name
       * @example My User
       */
      name?: string | null;
      /**
       * Format: email
       * @description The user's email (only displayed if requesting your own account). Requires `USER_READ_EMAIL` PAT scope.
       */
      email?: string | null;
      /**
       * @description A description of the user
       * @example My short biography
       */
      bio?: string;
      payout_data?: components['schemas']['UserPayoutData'];
    };
    /** @description Various data relating to the user's payouts status (you can only see your own) */
    UserPayoutData: {
      /**
       * @description The payout balance available for the user to withdraw (note, you cannot modify this in a PATCH request)
       * @example 10.11223344556678
       */
      balance?: number;
      /**
       * @description The wallet that the user has selected
       * @example paypal
       * @enum {string}
       */
      payout_wallet?: 'paypal' | 'venmo';
      /**
       * @description The type of the user's wallet
       * @example email
       * @enum {string}
       */
      payout_wallet_type?: 'email' | 'phone' | 'user_handle';
      /**
       * @description The user's payout address
       * @example support@modrinth.com
       */
      payout_address?: string;
    } | null;
    User: components['schemas']['EditableUser'] & {
      /**
       * @description The user's ID
       * @example EEFFGGHH
       */
      id: string;
      /**
       * @description The user's avatar url
       * @example https://avatars.githubusercontent.com/u/11223344?v=1
       */
      avatar_url: string;
      /**
       * Format: ISO-8601
       * @description The time at which the user was created
       */
      created: string;
      /**
       * @description The user's role
       * @example developer
       * @enum {string}
       */
      role: 'admin' | 'moderator' | 'developer';
      /**
       * Format: bitfield
       * @description Any badges applicable to this user. These are currently unused and undisplayed, and as such are subject to change
       *
       *     In order from first to seventh bit, the current bits are:
       *     - (unused)
       *     - EARLY_MODPACK_ADOPTER
       *     - EARLY_RESPACK_ADOPTER
       *     - EARLY_PLUGIN_ADOPTER
       *     - ALPHA_TESTER
       *     - CONTRIBUTOR
       *     - TRANSLATOR
       *
       * @example 63
       */
      badges?: number;
      /**
       * @description A list of authentication providers you have signed up for (only displayed if requesting your own account)
       * @example [
       *       "github",
       *       "gitlab",
       *       "steam",
       *       "microsoft",
       *       "google",
       *       "discord"
       *     ]
       */
      auth_providers?: string[] | null;
      /** @description Whether your email is verified (only displayed if requesting your own account) */
      email_verified?: boolean | null;
      /** @description Whether you have a password associated with your account (only displayed if requesting your own account) */
      has_password?: boolean | null;
      /** @description Whether you have TOTP two-factor authentication connected to your account (only displayed if requesting your own account) */
      has_totp?: boolean | null;
      /**
       * @deprecated
       * @description Deprecated - this is no longer public for security reasons and is always null
       * @example null
       */
      github_id?: number | null;
    };
    UserPayoutHistory: {
      /**
       * @description The all-time balance accrued by this user in USD
       * @example 10.11223344556678
       */
      all_time?: string;
      /**
       * @description The amount in USD made by the user in the previous 30 days
       * @example 2.2244668800224465
       */
      last_month?: string;
      /** @description A history of all of the user's past transactions */
      payouts?: components['schemas']['UserPayoutHistoryEntry'][];
    };
    UserPayoutHistoryEntry: {
      /**
       * Format: ISO-8601
       * @description The date of this transaction
       */
      created?: string;
      /**
       * @description The amount of this transaction in USD
       * @example 10
       */
      amount?: number;
      /**
       * @description The status of this transaction
       * @example success
       */
      status?: string;
    };
    Notification: {
      /**
       * @description The id of the notification
       * @example UUVVWWXX
       */
      id: string;
      /**
       * @description The id of the user who received the notification
       * @example EEFFGGHH
       */
      user_id: string;
      /**
       * @description The type of notification
       * @example project_update
       * @enum {string|null}
       */
      type?: 'project_update' | 'team_invite' | 'status_change' | 'moderator_message' | null;
      /**
       * @description The title of the notification
       * @example **My Project** has been updated!
       */
      title: string;
      /**
       * @description The body text of the notification
       * @example The project, My Project, has released a new version: 1.0.0
       */
      text: string;
      /**
       * @description A link to the related project or version
       * @example mod/AABBCCDD/version/IIJJKKLL
       */
      link: string;
      /**
       * @description Whether the notification has been read or not
       * @example false
       */
      read: boolean;
      /**
       * Format: ISO-8601
       * @description The time at which the notification was created
       */
      created: string;
      /** @description A list of actions that can be performed */
      actions: components['schemas']['NotificationAction'][];
    };
    /** @description An action that can be performed on a notification */
    NotificationAction: {
      /**
       * @description The friendly name for this action
       * @example Accept
       */
      title?: string;
      /**
       * @description The HTTP code and path to request in order to perform this action.
       * @example [
       *       "POST",
       *       "team/{id}/join"
       *     ]
       */
      action_route?: string[];
    };
    CreatableReport: {
      /**
       * @description The type of the report being sent
       * @example copyright
       */
      report_type: string;
      /**
       * @description The ID of the item (project, version, or user) being reported
       * @example EEFFGGHH
       */
      item_id: string;
      /**
       * @description The type of the item being reported
       * @example project
       * @enum {string}
       */
      item_type: 'project' | 'user' | 'version';
      /**
       * @description The extended explanation of the report
       * @example This is a reupload of my mod, AABBCCDD!
       */
      body: string;
    };
    Report: components['schemas']['CreatableReport'] & {
      /**
       * @description The ID of the report
       * @example VVWWXXYY
       */
      id?: string;
      /**
       * @description The ID of the user who reported the item
       * @example UUVVWWXX
       */
      reporter: string;
      /**
       * Format: ISO-8601
       * @description The time at which the report was created
       */
      created: string;
      /** @description Whether the report is resolved */
      closed: boolean;
      /**
       * @description The ID of the moderation thread associated with this report
       * @example TTUUVVWW
       */
      thread_id: string;
    };
    Thread: {
      /**
       * @description The ID of the thread
       * @example WWXXYYZZ
       */
      id: string;
      /** @enum {string} */
      type: 'project' | 'report' | 'direct_message';
      /** @description The ID of the associated project if a project thread */
      project_id?: string | null;
      /** @description The ID of the associated report if a report thread */
      report_id?: string | null;
      messages: components['schemas']['ThreadMessage'][];
      members: components['schemas']['User'][];
    };
    ThreadMessage: {
      /**
       * @description The ID of the message itself
       * @example MMNNOOPP
       */
      id: string;
      /**
       * @description The ID of the author
       * @example QQRRSSTT
       */
      author_id?: string | null;
      body: components['schemas']['ThreadMessageBody'];
      /**
       * Format: ISO-8601
       * @description The time at which the message was created
       */
      created: string;
    };
    /** @description The contents of the message. **Fields will vary depending on message type.** */
    ThreadMessageBody: {
      /**
       * @description The type of message
       * @example status_change
       * @enum {string}
       */
      type: 'status_change' | 'text' | 'thread_closure' | 'deleted';
      /**
       * @description The actual message text. **Only present for `text` message type**
       * @example This is the text of the message.
       */
      body?: string;
      /**
       * @description Whether the message is only visible to moderators. **Only present for `text` message type**
       * @example false
       */
      private?: boolean;
      /**
       * @description The ID of the message being replied to by this message. **Only present for `text` message type**
       * @example SSTTUUVV
       */
      replying_to?: string | null;
      /**
       * @description The old status of the project. **Only present for `status_change` message type**
       * @example processing
       * @enum {string}
       */
      old_status?:
        | 'approved'
        | 'archived'
        | 'rejected'
        | 'draft'
        | 'unlisted'
        | 'processing'
        | 'withheld'
        | 'scheduled'
        | 'private'
        | 'unknown';
      /**
       * @description The new status of the project. **Only present for `status_change` message type**
       * @example approved
       * @enum {string}
       */
      new_status?:
        | 'approved'
        | 'archived'
        | 'rejected'
        | 'draft'
        | 'unlisted'
        | 'processing'
        | 'withheld'
        | 'scheduled'
        | 'private'
        | 'unknown';
    };
    TeamMember: {
      /**
       * @description The ID of the team this team member is a member of
       * @example MMNNOOPP
       */
      team_id: string;
      user: components['schemas']['User'];
      /**
       * @description The user's role on the team
       * @example Member
       */
      role: string;
      /**
       * Format: bitfield
       * @description The user's permissions in bitfield format (requires authorization to view)
       *
       *     In order from first to tenth bit, the bits are:
       *     - UPLOAD_VERSION
       *     - DELETE_VERSION
       *     - EDIT_DETAILS
       *     - EDIT_BODY
       *     - MANAGE_INVITES
       *     - REMOVE_MEMBER
       *     - EDIT_MEMBER
       *     - DELETE_PROJECT
       *     - VIEW_ANALYTICS
       *     - VIEW_PAYOUTS
       *
       * @example 127
       */
      permissions?: number;
      /**
       * @description Whether or not the user has accepted to be on the team (requires authorization to view)
       * @example true
       */
      accepted: boolean;
      /**
       * @description The split of payouts going to this user. The proportion of payouts they get is their split divided by the sum of the splits of all members.
       * @example 100
       */
      payouts_split?: number;
      /**
       * @description The order of the team member.
       * @example 0
       */
      ordering?: number;
    };
    CategoryTag: {
      /**
       * @description The SVG icon of a category
       * @example <svg></svg>
       */
      icon: string;
      /**
       * @description The name of the category
       * @example adventure
       */
      name: string;
      /**
       * @description The project type this category is applicable to
       * @example mod
       */
      project_type: string;
      /**
       * @description The header under which the category should go
       * @example resolutions
       */
      header: string;
    };
    LoaderTag: {
      /**
       * @description The SVG icon of a loader
       * @example <svg></svg>
       */
      icon: string;
      /**
       * @description The name of the loader
       * @example fabric
       */
      name: string;
      /**
       * @description The project types that this loader is applicable to
       * @example [
       *       "mod",
       *       "modpack"
       *     ]
       */
      supported_project_types: string[];
    };
    GameVersionTag: {
      /**
       * @description The name/number of the game version
       * @example 1.18.1
       */
      version: string;
      /**
       * @description The type of the game version
       * @example release
       * @enum {string}
       */
      version_type: 'release' | 'snapshot' | 'alpha' | 'beta';
      /**
       * Format: ISO-8601
       * @description The date of the game version release
       */
      date: string;
      /**
       * @description Whether or not this is a major version, used for Featured Versions
       * @example true
       */
      major: boolean;
    };
    DonationPlatformTag: {
      /**
       * @description The short identifier of the donation platform
       * @example bmac
       */
      short: string;
      /**
       * @description The full name of the donation platform
       * @example Buy Me a Coffee
       */
      name: string;
    };
    ModifyTeamMemberBody: {
      /** @example Contributor */
      role?: string;
      /**
       * Format: bitfield
       * @description The user's permissions in bitfield format
       *
       *     In order from first to tenth bit, the bits are:
       *     - UPLOAD_VERSION
       *     - DELETE_VERSION
       *     - EDIT_DETAILS
       *     - EDIT_BODY
       *     - MANAGE_INVITES
       *     - REMOVE_MEMBER
       *     - EDIT_MEMBER
       *     - DELETE_PROJECT
       *     - VIEW_ANALYTICS
       *     - VIEW_PAYOUTS
       *
       * @example 127
       */
      permissions?: number;
      /**
       * @description The split of payouts going to this user. The proportion of payouts they get is their split divided by the sum of the splits of all members.
       * @example 100
       */
      payouts_split?: number;
      /**
       * @description The order of the team member.
       * @example 0
       */
      ordering?: number;
    };
    /** @description A short overview of a license */
    LicenseTag: {
      /**
       * @description The short identifier of the license
       * @example lgpl-3
       */
      short: string;
      /**
       * @description The full name of the license
       * @example GNU Lesser General Public License v3
       */
      name: string;
    };
    /** @description A full license */
    License: {
      /** @example GNU Lesser General Public License v3.0 or later */
      title?: string;
      /** @example Insert the entire text of the LGPL-3.0 here... */
      body?: string;
    };
    InvalidInputError: {
      /**
       * @description The name of the error
       * @example invalid_input
       */
      error: string;
      /**
       * @description The contents of the error
       * @example Error while parsing multipart payload
       */
      description: string;
    };
    AuthError: {
      /**
       * @description The name of the error
       * @example unauthorized
       */
      error: string;
      /**
       * @description The contents of the error
       * @example Authentication Error: Invalid Authentication Credentials
       */
      description: string;
    };
    Statistics: {
      /** @description Number of projects on Modrinth */
      projects?: number;
      /** @description Number of versions on Modrinth */
      versions?: number;
      /** @description Number of version files on Modrinth */
      files?: number;
      /** @description Number of authors (users with projects) on Modrinth */
      authors?: number;
    };
    /** @description Mod version information that can be consumed by Forge's update checker */
    ForgeUpdates: {
      /**
       * @description A link to the mod page
       * @example https://modrinth.com
       */
      homepage?: string;
      promos?: components['schemas']['ForgeUpdateCheckerPromos'];
    };
    /** @description A list of the recommended and latest versions for each Minecraft release */
    ForgeUpdateCheckerPromos: {
      /** @description The mod version that is recommended for `{version}`. Excludes versions with the `alpha` and `beta` version types. */
      '{version}-recommended'?: string;
      /** @description The latest mod version for `{version}`. Shows versions with the `alpha` and `beta` version types. */
      '{version}-latest'?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description The ID or slug of the project */
    ProjectIdentifier: string;
    /** @description The IDs and/or slugs of the projects */
    MultipleProjectIdentifier: string;
    /** @description The ID or username of the user */
    UserIdentifier: string;
    /** @description The ID of the version */
    VersionIdentifier: string;
    /** @description The ID of the team */
    TeamIdentifier: string;
    /** @description The ID of the report */
    ReportIdentifier: string;
    /** @description The ID of the thread */
    ThreadIdentifier: string;
    /** @description The ID of the notification */
    NotificationIdentifier: string;
    /** @description The algorithm of the hash */
    AlgorithmIdentifier: 'sha1' | 'sha512';
    /** @description Whether to return multiple results when looking for this hash */
    MultipleHashQueryIdentifier: boolean;
    /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
    FileHashIdentifier: string;
  };
  requestBodies: {
    Image: {
      content: {
        'image/png': string;
        'image/jpeg': string;
        'image/bmp': string;
        'image/gif': string;
        'image/webp': string;
        'image/svg': string;
        'image/svgz': string;
        'image/rgb': string;
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  searchProjects: {
    parameters: {
      query?: {
        /** @description The query to search for */
        query?: string;
        /**
         * @description Facets are an essential concept for understanding how to filter out results.
         *
         *     These are the most commonly used facet types:
         *     - `project_type`
         *     - `categories` (loaders are lumped in with categories in search)
         *     - `versions`
         *     - `client_side`
         *     - `server_side`
         *     - `open_source`
         *
         *     Several others are also available for use, though these should not be used outside very specific use cases.
         *     - `title`
         *     - `author`
         *     - `follows`
         *     - `project_id`
         *     - `license`
         *     - `downloads`
         *     - `color`
         *     - `created_timestamp`
         *     - `modified_timestamp`
         *
         *     In order to then use these facets, you need a value to filter by, as well as an operation to perform on this value.
         *     The most common operation is `:` (same as `=`), though you can also use `!=`, `>=`, `>`, `<=`, and `<`.
         *     Join together the type, operation, and value, and you've got your string.
         *     ```
         *     {type} {operation} {value}
         *     ```
         *
         *     Examples:
         *     ```
         *     categories = adventure
         *     versions != 1.20.1
         *     downloads <= 100
         *     ```
         *
         *     You then join these strings together in arrays to signal `AND` and `OR` operators.
         *
         *     ##### OR
         *     All elements in a single array are considered to be joined by OR statements.
         *     For example, the search `[["versions:1.16.5", "versions:1.17.1"]]` translates to `Projects that support 1.16.5 OR 1.17.1`.
         *
         *     ##### AND
         *     Separate arrays are considered to be joined by AND statements.
         *     For example, the search `[["versions:1.16.5"], ["project_type:modpack"]]` translates to `Projects that support 1.16.5 AND are modpacks`.
         *
         * @example [["categories:forge"],["versions:1.17.1"],["project_type:mod"],["license:mit"]]
         */
        facets?: string;
        /** @description The sorting method used for sorting search results */
        index?: 'relevance' | 'downloads' | 'follows' | 'newest' | 'updated';
        /** @description The offset into the search. Skips this number of results */
        offset?: number;
        /** @description The number of results returned by the search */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SearchResults'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
    };
  };
  getProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  modifyProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** @description Modified project fields */
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditableProject'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getProjects: {
    parameters: {
      query: {
        /** @description The IDs and/or slugs of the projects */
        ids: components['parameters']['MultipleProjectIdentifier'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'][];
        };
      };
    };
  };
  patchProjects: {
    parameters: {
      query: {
        /** @description The IDs and/or slugs of the projects */
        ids: components['parameters']['MultipleProjectIdentifier'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Fields to edit on all projects specified */
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchProjectsBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  randomProjects: {
    parameters: {
      query: {
        /** @description The number of random projects to return */
        count: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'][];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
    };
  };
  createProject: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New project */
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['CreateProjectBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  deleteProjectIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  changeProjectIcon: {
    parameters: {
      query: {
        /** @description Image extension */
        ext: 'png' | 'jpg' | 'jpeg' | 'bmp' | 'gif' | 'webp' | 'svg' | 'svgz' | 'rgb';
      };
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: components['requestBodies']['Image'];
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
    };
  };
  checkProjectValidity: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectIdentifier'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addGalleryImage: {
    parameters: {
      query: {
        /** @description Image extension */
        ext: 'png' | 'jpg' | 'jpeg' | 'bmp' | 'gif' | 'webp' | 'svg' | 'svgz' | 'rgb';
        /** @description Whether an image is featured */
        featured: boolean;
        /** @description Title of the image */
        title?: string;
        /** @description Description of the image */
        description?: string;
        /** @description Ordering of the image */
        ordering?: number;
      };
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: components['requestBodies']['Image'];
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteGalleryImage: {
    parameters: {
      query: {
        /** @description URL link of the image to delete */
        url: string;
      };
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  modifyGalleryImage: {
    parameters: {
      query: {
        /** @description URL link of the image to modify */
        url: string;
        /** @description Whether the image is featured */
        featured?: boolean;
        /** @description New title of the image */
        title?: string;
        /** @description New description of the image */
        description?: string;
        /** @description New ordering of the image */
        ordering?: number;
      };
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getDependencies: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ProjectDependencyList'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  followProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  unfollowProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  scheduleProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    /** @description Information about date and requested status */
    requestBody?: {
      content: {
        'application/json': components['schemas']['Schedule'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  getProjectVersions: {
    parameters: {
      query?: {
        /** @description The types of loaders to filter for */
        loaders?: string;
        /** @description The game versions to filter for */
        game_versions?: string;
        /** @description Allows to filter for featured or non-featured versions only */
        featured?: boolean;
      };
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'][];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  modifyVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    /** @description Modified version fields */
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditableVersion'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getVersionFromIdOrNumber: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
        /** @description The version ID or version number */
        'id|number': string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createVersion: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description New version */
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['CreateVersionBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  scheduleVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    /** @description Information about date and requested status */
    requestBody?: {
      content: {
        'application/json': components['schemas']['Schedule'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  getVersions: {
    parameters: {
      query: {
        /** @description The IDs of the versions */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'][];
        };
      };
    };
  };
  addFilesToVersion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the version */
        id: components['parameters']['VersionIdentifier'];
      };
      cookie?: never;
    };
    /** @description New version files */
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** @enum {object} */
          data?: unknown;
        };
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  versionFromHash: {
    parameters: {
      query: {
        /** @description The algorithm of the hash */
        algorithm: components['parameters']['AlgorithmIdentifier'];
        /** @description Whether to return multiple results when looking for this hash */
        multiple?: components['parameters']['MultipleHashQueryIdentifier'];
      };
      header?: never;
      path: {
        /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
        hash: components['parameters']['FileHashIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteFileFromHash: {
    parameters: {
      query: {
        /** @description The algorithm of the hash */
        algorithm: components['parameters']['AlgorithmIdentifier'];
        /** @description Version ID to delete the version from, if multiple files of the same hash exist */
        version_id?: string;
      };
      header?: never;
      path: {
        /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
        hash: components['parameters']['FileHashIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLatestVersionFromHash: {
    parameters: {
      query: {
        /** @description The algorithm of the hash */
        algorithm: components['parameters']['AlgorithmIdentifier'];
      };
      header?: never;
      path: {
        /** @description The hash of the file, considering its byte content, and encoded in hexadecimal */
        hash: components['parameters']['FileHashIdentifier'];
      };
      cookie?: never;
    };
    /** @description Parameters of the updated version requested */
    requestBody?: {
      content: {
        'application/json': components['schemas']['GetLatestVersionFromHashBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Version'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  versionsFromHashes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Hashes and algorithm of the versions requested */
    requestBody?: {
      content: {
        'application/json': components['schemas']['HashList'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HashVersionMap'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLatestVersionsFromHashes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Parameters of the updated version requested */
    requestBody?: {
      content: {
        'application/json': components['schemas']['GetLatestVersionsFromHashesBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HashVersionMap'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  modifyUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** @description Modified user fields */
    requestBody?: {
      content: {
        'application/json': components['schemas']['EditableUser'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserFromAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query: {
        /** @description The IDs of the users */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'][];
        };
      };
    };
  };
  deleteUserIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeUserIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: components['requestBodies']['Image'];
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserProjects: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'][];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getFollowedProjects: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Project'][];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPayoutHistory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserPayoutHistory'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  withdrawPayout: {
    parameters: {
      query: {
        /** @description Amount to withdraw */
        amount: number;
      };
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserNotifications: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getNotification: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the notification */
        id: components['parameters']['NotificationIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Notification'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteNotification: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the notification */
        id: components['parameters']['NotificationIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  readNotification: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the notification */
        id: components['parameters']['NotificationIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getNotifications: {
    parameters: {
      query: {
        /** @description The IDs of the notifications */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteNotifications: {
    parameters: {
      query: {
        /** @description The IDs of the notifications */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  readNotifications: {
    parameters: {
      query: {
        /** @description The IDs of the notifications */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOpenReports: {
    parameters: {
      query?: {
        count?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Report'][];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  submitReport: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The report to be sent */
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreatableReport'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Report'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
    };
  };
  getReport: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the report */
        id: components['parameters']['ReportIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Report'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  modifyReport: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the report */
        id: components['parameters']['ReportIdentifier'];
      };
      cookie?: never;
    };
    /** @description What to modify about the report */
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description The contents of the report
           * @example This is the meat and potatoes of the report!
           */
          body?: string;
          /** @description Whether the thread should be closed */
          closed?: boolean;
        };
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getReports: {
    parameters: {
      query: {
        /** @description The IDs of the reports */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Report'][];
        };
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getThread: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the thread */
        id: components['parameters']['ThreadIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Thread'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  sendThreadMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the thread */
        id: components['parameters']['ThreadIdentifier'];
      };
      cookie?: never;
    };
    /** @description The message to be sent. Note that you only need the fields applicable for the `text` type. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ThreadMessageBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Thread'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getThreads: {
    parameters: {
      query: {
        /** @description The IDs of the threads */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Thread'][];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteThreadMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the message */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getProjectTeamMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TeamMember'][];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTeamMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TeamMember'][];
        };
      };
    };
  };
  addTeamMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    /** @description User to be added (must be the ID, usernames cannot be used here) */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserIdentifier'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTeams: {
    parameters: {
      query: {
        /** @description The IDs of the teams */
        ids: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TeamMember'][][];
        };
      };
    };
  };
  joinTeam: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteTeamMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  modifyTeamMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
        /** @description The ID or username of the user */
        'id|username': components['parameters']['UserIdentifier'];
      };
      cookie?: never;
    };
    /** @description Contents to be modified */
    requestBody?: {
      content: {
        'application/json': components['schemas']['ModifyTeamMemberBody'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  transferTeamOwnership: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID of the team */
        id: components['parameters']['TeamIdentifier'];
      };
      cookie?: never;
    };
    /** @description New owner's ID */
    requestBody?: {
      content: {
        'application/json': components['schemas']['UserIdentifier'];
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Incorrect token scopes or no authorization to access the requested item(s) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['AuthError'];
        };
      };
      /** @description The requested item(s) were not found or no authorization to access the requested item(s) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  categoryList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CategoryTag'][];
        };
      };
    };
  };
  loaderList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoaderTag'][];
        };
      };
    };
  };
  versionList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GameVersionTag'][];
        };
      };
    };
  };
  licenseList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LicenseTag'][];
        };
      };
    };
  };
  licenseText: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The license ID to get the text of */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['License'];
        };
      };
      /** @description Request was invalid, see given error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
    };
  };
  donationPlatformList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DonationPlatformTag'][];
        };
      };
    };
  };
  reportTypeList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
    };
  };
  projectTypeList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
    };
  };
  sideTypeList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
    };
  };
  forgeUpdates: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The ID or slug of the project */
        'id|slug': components['parameters']['ProjectIdentifier'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ForgeUpdates'];
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['InvalidInputError'];
        };
      };
    };
  };
  statistics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Expected response to a valid request */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Statistics'];
        };
      };
    };
  };
}
