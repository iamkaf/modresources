apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.hypherionmc.modutils.modpublisher"

architectury {
    platformSetupLoomIde()
    forge()
}

def generatedResources = file('../common/src/main/generated')
def existingResources = file('../common/src/main/resources')
def mod_id_arg = rootProject.mod_id

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            data()
            programArgs "--all", "--mod", "${mod_id_arg}"
            programArgs "--output", "${generatedResources}"
            programArgs "--existing", "${existingResources}"
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

def extractLatestChangelog() {
    // Read the changelog file
    def changelogFile = file('../changelog.md').text

    // Use regex to match the first section of the changelog (latest version and its changes)
    def changelog = (changelogFile =~ /## [\s\S]+?(?=\n##)/)[0]

    // Return the changelog string
    return changelog
}

publisher {
    // Setup the required API keys. You only need to define the keys for
    // the platforms you plan on uploading to
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN")
        // Curseforge Token
        curseforge System.getenv("CURSEFORGE_TOKEN")
    }

    // Enable Debug mode. When enabled, no files will actually be uploaded
    setDebug(Boolean.valueOf(dry_run))

    // Curseforge Project ID
    setCurseID(curse_id)

    // Modrinth Project ID
    setModrinthID(modrinth_id)

    // Type of release. beta, alpha or release
    // You can also use VersionType.BETA, VersionType.ALPHA or VersionType.RELEASE
    setVersionType(release_type)

    setChangelog(extractLatestChangelog())

    // Required for Modrinth/GitHub
    setProjectVersion(mod_version)

    // Fancy display name for the upload.
    // Will default to the project version if not set
    setDisplayName("$mod_id-$project.name-$project.minecraft_version-$project.version")

    // The supported game versions
    setGameVersions(game_versions.split(','))

    // The modloaders your upload supports.
    // This can also be an Enum from ModLoader,
    // like setLoaders(ModLoader.FABRIC, ModLoader.FORGE)
    setLoaders("forge")

    // The new Curseforge Environment tag. Optional
    // Valid values are "server", "client" or "both"
    // You can also use CurseEnvironment.BOTH, or CurseEnvironment.SERVER or CurseEnvironment.CLIENT
    setCurseEnvironment(mod_environment)

    // Upload the release, but keep it "private" until you are ready
    // Unreleased feature on CurseForge, working on Modrinth
    setIsManualRelease(false)

    // The file to be uploaded. This can be a file, task, or string.
    // setArtifact("build/libs/mymod.jar")
    // setArtifact(jar.getArchiveFile().get())
    // If this is a task, the task specified will be executed before publishing
    var toPublish = "build/libs/$mod_id-$project.name-$project.minecraft_version-$project.version" + ".jar";
    setArtifact(toPublish)
    setDisableEmptyJarCheck(false)

    // Add supported java versions. Currently only used by CurseForge
    // Supports anything that can be parsed using JavaVersion.toVersion()
    setJavaVersions(List.of(JavaVersion.VERSION_17))

    if (mod_modrinth_depends?.trim()) {
        modrinthDepends {
            required(mod_modrinth_depends.split(','))
        }
    }

    if (mod_curse_depends?.trim()) {
        curseDepends {
            required(mod_curse_depends.split(','))
        }
    }
}
